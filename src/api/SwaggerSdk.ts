//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface ISwaggerSdk {

    /**
     * @param pageSize (optional) 
     * @param cursor (optional) 
     * @return OK
     */
    listCompanies(pageSize?: number | undefined, cursor?: string | undefined): Promise<CompanyDto[]>;

    /**
     * @return OK
     */
    deleteCompany(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    patchCompany(id: number, body?: PatchCompanyDto | undefined): Promise<void>;

    /**
     * @param compId (optional) 
     * @return OK
     */
    getCompanyContacts(compId?: number | undefined): Promise<ContactDto[]>;
}

export class SwaggerSdk implements ISwaggerSdk {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param pageSize (optional) 
     * @param cursor (optional) 
     * @return OK
     */
    listCompanies(pageSize?: number | undefined, cursor?: string | undefined, signal?: AbortSignal): Promise<CompanyDto[]> {
        let url_ = this.baseUrl + "/api/Company?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (cursor === null)
            throw new Error("The parameter 'cursor' cannot be null.");
        else if (cursor !== undefined)
            url_ += "cursor=" + encodeURIComponent("" + cursor) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListCompanies(_response);
        });
    }

    protected processListCompanies(response: Response): Promise<CompanyDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompanyDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto[]>(null as any);
    }

    /**
     * @return OK
     */
    deleteCompany(id: number, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/api/Company/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCompany(_response);
        });
    }

    protected processDeleteCompany(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    patchCompany(id: number, body?: PatchCompanyDto | undefined, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/api/Company/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatchCompany(_response);
        });
    }

    protected processPatchCompany(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param compId (optional) 
     * @return OK
     */
    getCompanyContacts(compId?: number | undefined, signal?: AbortSignal): Promise<ContactDto[]> {
        let url_ = this.baseUrl + "/api/Contact?";
        if (compId === null)
            throw new Error("The parameter 'compId' cannot be null.");
        else if (compId !== undefined)
            url_ += "compId=" + encodeURIComponent("" + compId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompanyContacts(_response);
        });
    }

    protected processGetCompanyContacts(response: Response): Promise<ContactDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ContactDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ContactDto[]>(null as any);
    }
}

export enum CompClassification {
    Unspecified = "Unspecified",
    GoodMatch = "GoodMatch",
    FuckYou = "FuckYou",
    Ecommerce = "Ecommerce",
    GimmeSomeLove = "GimmeSomeLove",
}

export class CompanyDto implements ICompanyDto {
    id?: number;
    companyName?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    fullAddress?: string | undefined;
    website?: string | undefined;
    categoryGoogle?: string | undefined;
    ratingGoogle?: number | undefined;
    ratedCount?: string | undefined;
    googleMapsUrl?: string | undefined;
    bigFishScore?: number | undefined;
    classification?: CompClassification;

    constructor(data?: ICompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyName = _data["companyName"];
            this.country = _data["country"];
            this.city = _data["city"];
            this.fullAddress = _data["fullAddress"];
            this.website = _data["website"];
            this.categoryGoogle = _data["categoryGoogle"];
            this.ratingGoogle = _data["ratingGoogle"];
            this.ratedCount = _data["ratedCount"];
            this.googleMapsUrl = _data["googleMapsUrl"];
            this.bigFishScore = _data["bigFishScore"];
            this.classification = _data["classification"];
        }
    }

    static fromJS(data: any): CompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["country"] = this.country;
        data["city"] = this.city;
        data["fullAddress"] = this.fullAddress;
        data["website"] = this.website;
        data["categoryGoogle"] = this.categoryGoogle;
        data["ratingGoogle"] = this.ratingGoogle;
        data["ratedCount"] = this.ratedCount;
        data["googleMapsUrl"] = this.googleMapsUrl;
        data["bigFishScore"] = this.bigFishScore;
        data["classification"] = this.classification;
        return data;
    }
}

export interface ICompanyDto {
    id?: number;
    companyName?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    fullAddress?: string | undefined;
    website?: string | undefined;
    categoryGoogle?: string | undefined;
    ratingGoogle?: number | undefined;
    ratedCount?: string | undefined;
    googleMapsUrl?: string | undefined;
    bigFishScore?: number | undefined;
    classification?: CompClassification;
}

export class ContactDto implements IContactDto {
    id?: number;
    companyId?: number;
    value!: string | undefined;
    type?: ContactType;
    isOnWhatsapp?: boolean | undefined;
    contactedFromEmail?: string | undefined;
    checked?: boolean | undefined;
    date?: Date | undefined;

    constructor(data?: IContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyId = _data["companyId"];
            this.value = _data["value"];
            this.type = _data["type"];
            this.isOnWhatsapp = _data["isOnWhatsapp"];
            this.contactedFromEmail = _data["contactedFromEmail"];
            this.checked = _data["checked"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyId"] = this.companyId;
        data["value"] = this.value;
        data["type"] = this.type;
        data["isOnWhatsapp"] = this.isOnWhatsapp;
        data["contactedFromEmail"] = this.contactedFromEmail;
        data["checked"] = this.checked;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface IContactDto {
    id?: number;
    companyId?: number;
    value: string | undefined;
    type?: ContactType;
    isOnWhatsapp?: boolean | undefined;
    contactedFromEmail?: string | undefined;
    checked?: boolean | undefined;
    date?: Date | undefined;
}

export enum ContactType {
    Unspecified = "Unspecified",
    Phone = "Phone",
    Email = "Email",
    Facebook = "Facebook",
    Linkedin = "Linkedin",
    Instagram = "Instagram",
    Other = "Other",
}

export class PatchCompanyDto implements IPatchCompanyDto {
    companyName?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    fullAddress?: string | undefined;
    website?: string | undefined;
    categoryGoogle?: string | undefined;
    ratingGoogle?: number | undefined;
    ratedCount?: string | undefined;
    googleMapsUrl?: string | undefined;
    bigFishScore?: number | undefined;
    classification?: CompClassification;

    constructor(data?: IPatchCompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyName = _data["companyName"];
            this.country = _data["country"];
            this.city = _data["city"];
            this.fullAddress = _data["fullAddress"];
            this.website = _data["website"];
            this.categoryGoogle = _data["categoryGoogle"];
            this.ratingGoogle = _data["ratingGoogle"];
            this.ratedCount = _data["ratedCount"];
            this.googleMapsUrl = _data["googleMapsUrl"];
            this.bigFishScore = _data["bigFishScore"];
            this.classification = _data["classification"];
        }
    }

    static fromJS(data: any): PatchCompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new PatchCompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["country"] = this.country;
        data["city"] = this.city;
        data["fullAddress"] = this.fullAddress;
        data["website"] = this.website;
        data["categoryGoogle"] = this.categoryGoogle;
        data["ratingGoogle"] = this.ratingGoogle;
        data["ratedCount"] = this.ratedCount;
        data["googleMapsUrl"] = this.googleMapsUrl;
        data["bigFishScore"] = this.bigFishScore;
        data["classification"] = this.classification;
        return data;
    }
}

export interface IPatchCompanyDto {
    companyName?: string | undefined;
    country?: string | undefined;
    city?: string | undefined;
    fullAddress?: string | undefined;
    website?: string | undefined;
    categoryGoogle?: string | undefined;
    ratingGoogle?: number | undefined;
    ratedCount?: string | undefined;
    googleMapsUrl?: string | undefined;
    bigFishScore?: number | undefined;
    classification?: CompClassification;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}